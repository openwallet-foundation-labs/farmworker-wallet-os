// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from "../../agent_sdk/support/entidad";
// END EXTRA CODE

/**
 * private async sendResponse(options: {
 *   connectionId: string
 *   threadId: string
 *   response: DrpcResponse
 * }): Promise<void>
 * 
 * Sends a drpc response to a connection
 * @param connectionId the connection id to use
 * @param threadId the thread id to respond to
 * @param response the drpc response object to send
 * 
 * export type DrpcResponse = DrpcResponseObject | (DrpcResponseObject | Record<string, never>)[] | Record<string, never>
 * 
 * export interface DrpcResponseObject {
 *   jsonrpc: string
 *   // eslint-disable-next-line @typescript-eslint/no-explicit-any
 *   result?: any
 *   error?: DrpcResponseError
 *   id: string | number | null
 * }
 * @param {string} agent_key
 * @param {string} connectionId
 * @param {string} response_receipts - json
 * @returns {Promise.<void>}
 */
export async function jsa_aries_agent_modules_receipts_sendMessageReceipts(agent_key, connectionId, response_receipts) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");
		if(connectionId==null)return Promise.reject("Invalid connectionId parameter");
		if(threadId==null)return Promise.reject("Invalid threadId parameter");
		if(response_receipts==null)return Promise.reject("Invalid response_receipts parameter");
	
	
		
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
	
		return Promise.resolve();
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
