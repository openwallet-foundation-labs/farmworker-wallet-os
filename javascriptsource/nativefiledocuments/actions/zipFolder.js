// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE

import NativeFileDocumentsUtils from "../nativefiledocumentsutils";
import RNFS from "react-native-fs";
import { Platform } from "react-native";
import { zip, zipWithPassword } from "react-native-zip-archive";

// END EXTRA CODE

/**
 * Zips the contents of the folder into a file on the file system.
 * 
 * Specify the password if the archive is to be password protected.
 * @param {string} sourcePath - The folder to zip
 * @param {"NativeFileDocuments.PathType.FullPath"|"NativeFileDocuments.PathType.DocumentsDirectory"} sourcePathType
 * @param {string} destPath - The path to the destination file to zip the folder into.
 * @param {"NativeFileDocuments.PathType.FullPath"|"NativeFileDocuments.PathType.DocumentsDirectory"} destPathType
 * @param {boolean} writeToLog
 * @param {string} password - Optional. Set a password to create a password protected archive.
 * @returns {Promise.<void>}
 */
export async function zipFolder(sourcePath, sourcePathType, destPath, destPathType, writeToLog, password) {
	// BEGIN USER CODE
	if (!sourcePath) {
		Promise.reject(new Error("No source path specified"));
	}
	if (!sourcePathType) {
		Promise.reject(new Error("No source type specified"));
	}

	if (!destPath) {
		Promise.reject(new Error("No destination file specified"));
	}
	if (!destPathType) {
		Promise.reject(new Error("No destination type specified"));
	}

	if (writeToLog) {
		NativeFileDocumentsUtils.writeToLog({
			actionName: "unzip",
			logType: "Parameters",
			logMessage: JSON.stringify({
				sourcePath: sourcePath,
				sourcePathType: sourcePathType,
				destPath: destPath,
				destPathType: destPathType
			})
		});
	}

	const fullSourcePath = NativeFileDocumentsUtils.getFullPathNoPrefix(sourcePath, sourcePathType, RNFS, Platform.OS);
	const fullDestPath = NativeFileDocumentsUtils.getFullPathNoPrefix(destPath, destPathType, RNFS, Platform.OS);

	if (writeToLog) {
		NativeFileDocumentsUtils.writeToLog({
			actionName: "unzip",
			logType: "Info",
			logMessage: "Full source path: " + fullSourcePath + ", full dest path: " + fullDestPath + ", has password: " + !!password
		});
	}

	if (password) {
		return zipWithPassword(fullSourcePath, fullDestPath, password);
	} else {
		return zip(fullSourcePath, fullDestPath);
	}

	// END USER CODE
}
