// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";
import "mx-global";
import ImagePicker from "react-native-image-crop-picker";
import NativeFileDocumentsUtils from "../nativefiledocumentsutils";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Crop the image. The passed meta data object must have the URL to the file, it must already have been copied to the proper name. SUB_CopyMendixFileDocumentForViewing can be used for that purpose.
 * 
 * Don't forget to delete the image file after saving it!
 * @param {string} sourceImageFullPath
 * @param {Big} cropWindowWidth
 * @param {Big} cropWindowHeight
 * @param {boolean} cropperCircleOverlay - Enable or disable circular cropping mask.
 * @param {string} cancelCaption - iOS only
 * @param {string} confirmCaption - iOS only
 * @param {string} dialogTitle - When left empty on iOS no title is shown, on Android a default is shown
 * @param {boolean} writeToLog
 * @returns {Promise.<MxObject>}
 */
export async function cropImage(sourceImageFullPath, cropWindowWidth, cropWindowHeight, cropperCircleOverlay, cancelCaption, confirmCaption, dialogTitle, writeToLog) {
	// BEGIN USER CODE
	return new Promise(function(resolve, reject) {
		if (!sourceImageFullPath) {
			reject(new Error("No source image path specified"));
		}

		if (!cropWindowWidth) {
			reject(new Error("No crop window width specified"));
		}
		const cropWindowWidthValue = Number(cropWindowWidth);
		if (cropWindowWidthValue < 0) {
			reject(new Error("Invalid crop window width: must be positive"));
		}

		if (!cropWindowHeight) {
			reject(new Error("No crop window height specified"));
		}
		const cropWindowHeightValue = Number(cropWindowHeight);
		if (cropWindowHeightValue < 0) {
			reject(new Error("Invalid crop window height: must be positive"));
		}

		if (writeToLog) {
			NativeFileDocumentsUtils.writeToLog({
				actionName: "cropImage",
				logType: "Parameters",
				logMessage: JSON.stringify({
					sourceImageFullPath: sourceImageFullPath,
					cropWindowWidth: cropWindowWidthValue,
					cropWindowHeight: cropWindowHeightValue
				})
			});
		}

		ImagePicker.openCropper({
			path: sourceImageFullPath,
			width: cropWindowWidthValue,
			height: cropWindowHeightValue,
			cropping: true,
			cropperCircleOverlay,
			mediaType: "photo",
			forceJpg: true,
			cropperCancelText: cancelCaption ? cancelCaption : undefined,
			cropperChooseText: confirmCaption ? confirmCaption : undefined,
			cropperToolbarTitle: dialogTitle ? dialogTitle : undefined
		}).then(cropData => {
			if (writeToLog) {
				NativeFileDocumentsUtils.writeToLog({
					actionName: "cropImage",
					logType: "Info",
					logMessage: JSON.stringify(cropData)
				});
			}
			NativeFileDocumentsUtils.createMxObject("NativeFileDocuments.ImageCropMetaData").then(resultMxObj => {
				resultMxObj.set("CroppedImageFullPath", cropData.path);
				resultMxObj.set("CroppedWidth", cropData.width);
				resultMxObj.set("CroppedHeight", cropData.height);
				resultMxObj.set("CroppedSize", cropData.size);
				resolve(resultMxObj);
			});
		}).catch(error => {
			if (error.code === "E_PICKER_CANCELLED") {
				if (writeToLog) {
					NativeFileDocumentsUtils.writeToLog({
						actionName: "cropImage",
						logType: "Info",
						logMessage: "User cancelled"
					});
				}
				resolve(undefined);
			} else {
				NativeFileDocumentsUtils.writeToLog({
					actionName: "cropImage",
					logType: "Exception",
					logMessage: JSON.stringify(error)
				});
				reject(error);
			}
		});
	});
	// END USER CODE
}
