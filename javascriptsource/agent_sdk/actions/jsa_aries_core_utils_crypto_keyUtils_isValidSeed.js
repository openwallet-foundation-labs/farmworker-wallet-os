// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import "../shim.js";
import { isValidSeed } from '@credo-ts/core';
import { KeyType } from '@credo-ts/core';
import { Buffer } from '@credo-ts/core';

// END EXTRA CODE

/**
 * isValidSeed(seed: Buffer, keyType: KeyType): boolean
 * 
 * https://github.com/openwallet-foundation/credo-ts/blob/59c7e15259af0d258cb07996d76cc0b2742c88ad/packages/core/src/crypto/keyUtils.ts
 * @param {string} seed
 * @param {"Agent_SDK.enum_aries_KeyType.Bls12381g1"|"Agent_SDK.enum_aries_KeyType.Bls12381g1g2"|"Agent_SDK.enum_aries_KeyType.Bls12381g2"|"Agent_SDK.enum_aries_KeyType.Ed25519"|"Agent_SDK.enum_aries_KeyType.X25519"|"Agent_SDK.enum_aries_KeyType.K256"|"Agent_SDK.enum_aries_KeyType.P256"|"Agent_SDK.enum_aries_KeyType.P384"|"Agent_SDK.enum_aries_KeyType.P521"} keyType
 * @returns {Promise.<boolean>}
 */
export async function jsa_aries_core_utils_crypto_keyUtils_isValidSeed(seed, keyType) {
	// BEGIN USER CODE
	try{
		if(seed==null)return(Promise.reject("seed null"));
		try{
			seed=JSON.parse(seed)
		}catch(e){
			return(Promise.reject("seed is not a json array: "+e.toString()));
		}
		seed=Buffer.from(seed);
		if(!Buffer.isBuffer(seed))return(Promise.reject("seed is not a buffer"));
		if(keyType==null)return(Promise.reject("keyType null"));
		switch(keyType){
			case"Bls12381g1":
				keyType=KeyType.Bls12381g1;
				break;
			case"Bls12381g1g2":
				keyType=KeyType.Bls12381g1g2;
				break;
			case"Bls12381g2":
				keyType=KeyType.Bls12381g2;
				break;
			case"Ed25519":
				keyType=KeyType.Ed25519;
				break;
			case"K256":
				keyType=KeyType.K256;
				break;
			case"P256":
				keyType=KeyType.P256;
				break;
			case"P384":
				keyType=KeyType.P384;
				break;
			case"P521":
				keyType=KeyType.P521;
				break;
			case"X25519":
				keyType=KeyType.X25519;
				break;
  			default:
				return(Promise.reject("Unimplemented key type"));
		}
		return(Promise.resolve(isValidSeed(seed,keyType)));
	}catch(e){
		return(Promise.reject(e.toString()));
	}
	// END USER CODE
}
